fit <- hclust(d, method = "Wards.D")
fit <- hclust(d, distance = "Wards.D")
fit <- hclust(d)
plot(fit)
rect.hclust(fit, 5)
plot(fit)
d <- dist(mat, method = "Wards.D") # distance matrix
d <- dist(mat, method = "binary") # distance matrix
fit <- hclust(d)
plot(fit)
d
d[1,]
dim(d)
str(d)
install.packages("ggdendro")
library(ggplot2)
library(ggplot2)
library(ggdendro)
dhc <- as.dendrogram(fit)
ddata <- dendro_data(dhc, type = "rectangle")
ddata <- dendro_data(dhc, type = "rectangle")
p <- ggplot(segment(ddata)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
coord_flip() +
scale_y_reverse(expand = c(0.2, 0))
p
mat <- cbind(hr,
wmata[, grep("reason",colnames(wmata))])
colnames(mat) <- paste0("test",1:ncol(mat))
d <- dist(mat, method = "binary") # distance matrix
fit <- hclust(d)
plot(fit)
mat <- cbind(wmata[, grep("reason",colnames(wmata))])
colnames(mat) <- paste0("test",1:ncol(mat))
d <- dist(mat, method = "binary") # distance matrix
fit <- hclust(d)
plot(fit)
df <- read.csv("base_data/practice/jfkrelease-2017.csv")
df <- read.csv("base_data/practice/ready/jfkrelease-2017.csv")
df <- read.csv("base_data/practice/ready/jfk.csv")
knitr::kable(df)
knitr::kable(df, booktab = TRUE)
knitr::kable(df[1:3,1:6], booktab = TRUE)
knitr::kable(df[1:3,1:7], booktab = TRUE)
df <- read.csv("base_data/practice/ready/jfk.csv")
knitr::kable(df[1:6,1:7], booktabs = TRUE,
caption = 'Selection of records from the 2017 JFK Assassination Record Release')
setwd("base_data/practice")
setwd("base_data/practice")
13.8/1.6
library(digIt)
df <- digIt("ndvi")
library(digIt)
df <- digIt("ndvi")
library(digIt)
df <- digIt("ndvi")
library(digIt)
df <- digIt("ndvi")
library(digIt)
df <- digIt("ndvi")
#Library
library(raster)
library(digIt)
img <- digIt("color_segment_kansas")
plotRGB(img)
#Dimensions
dim(img)
#Convert image into columns
data <- cbind(as.vector(img[[1]]),
as.vector(img[[2]]),
as.vector(img[[3]]))
#Load cluster library
library(cluster)
#Calculate distance object using sample of n = 10000
set.seed(123)
subdata <- data[sample(data, 20000),]
d <- dist(subdata)
#Set up placeholder for silhouette values
sil.out <- data.frame()
#Loop through values of k
for(k in 2:10){
set.seed(123)
#Calculate k-means
res <- kmeans(subdata, k)
#Get silhouette
sil <- silhouette(res$cluster, d)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]),
minimum = min(sil[,3]),
maximum = max(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
#Plot result
plot(sil.out[, c("k.level", "avg")], type = "l", col = "orange",
ylab = "Mean Silhouette", xlab = "k")
points(sil.out[, c("k.level", "avg")], pch = 19, col = "orange")
#Load cluster library
library(cluster)
#Calculate distance object using sample of n = 10000
set.seed(20)
subdata <- data[sample(data, 20000),]
d <- dist(subdata)
#Set up placeholder for silhouette values
sil.out <- data.frame()
#Loop through values of k
for(k in 2:10){
set.seed(20)
#Calculate k-means
res <- kmeans(subdata, k)
#Get silhouette
sil <- silhouette(res$cluster, d)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]),
minimum = min(sil[,3]),
maximum = max(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
#Plot result
plot(sil.out[, c("k.level", "avg")], type = "l", col = "orange",
ylab = "Mean Silhouette", xlab = "k")
points(sil.out[, c("k.level", "avg")], pch = 19, col = "orange")
#K values
set.seed(123)
res <- kmeans(data, 2)
#Convert cluster labels into matrix
mat <- matrix(res$cluster,
ncol = ncol(img),
nrow = nrow(img),
byrow = TRUE)
img2 <- raster(mat)
plot(img2, box=FALSE, yaxt = "n",  xaxt = "n",
frame.plot = FALSE, col = c("orange","red", "green"))
plot(img2, box=FALSE, yaxt = "n",  xaxt = "n",
frame.plot = FALSE, col = c("black", "green"))
plot(img2, box=FALSE, yaxt = "n",  xaxt = "n",
frame.plot = FALSE, col = c("black", "green"))
prop <- mean(mat == 2)
print(paste0("%Area = ", prop))
print(paste0("km2 = ", 37.2 * 38.8 * prop))
digList
digList()
############################
## CLUSTERING 311 EXAMPLE###
############################
#An example on how kmeans can be applied
#This data is pre-processed from the NYC Open Data Portal
#Data are grid points in Lat/Lon at 3-digit degree precision
#Set directory
setwd("/Users/jeff/Documents/Github/data-science/lecture-09/data")
#Load in pre-processed data
load("nyc311.Rda")
#Check what's in the data
dim(nyc311)
colnames(nyc311)
summary(nyc311)
#Custom Function to summarize
sumUp <- function(data, clusters, depth = 3, horizontal = FALSE){
# Summarize cluster variables by most frequent
#
# Args:
#       data: input data
#       clusters: vector of cluster labels
#       depth: top 3 most frequent variables
#       horizontal: control format of results. FALSE means one cluster per row.
#
# Returns:
#       A data frame of k-number of centroids
#
#Calculate means, rotate such that features = rows
overview <- aggregate(data, list(clusters), mean)
overview <- as.data.frame(cbind(colnames(overview)[2:ncol(overview)],
t(overview[,2:ncol(overview)])))
row.names(overview) <- 1:nrow(overview)
overview[,1] <- gsub("count.","",as.character(overview[,1]))
#Clean up values as numerics
for(i in 2:ncol(overview)){
overview[,i] <- round(as.numeric(as.character(overview[,i])),2)
}
#Get top X features
depth.temp <- data.frame()
for(i in 2:ncol(overview)){
temp <- overview[order(-overview[,i]), ]
temp <- paste("(",temp[,i], "): ", temp[,1], sep = "")
temp <- as.data.frame(matrix(temp[1:depth],
nrow = 1,
ncol = depth))
colnames(temp) <- paste0("Rank.", 1:depth)
depth.temp <- rbind(depth.temp, temp)
}
depth.temp <- cbind(data.frame(table(clusters)), depth.temp)
#Rotate?
if(horizontal == TRUE){
depth.temp <- t(depth.temp)
}
return(depth.temp)
}
#What are the 10 most common 311 complaints?
clusters <- rep(1, nrow(nyc311))
sumUp(nyc311[,3:ncol(nyc311)], clusters, 10, horizontal = TRUE)
View(nyc311)
View(nyc311)
sum(nyc311[1,3:ncol(nyc311)])
library(devtools)
install_github("SigmaMonstR/digIt", force = TRUE)
library(digIt)
digList()
test <- digIt("nyc311_gridded")
nyc311.short <- nyc311[sample(1:nrow(nyc311), 10000), ]
nyc.short <- scale(nyc311.short[,3:ncol(nyc311.short)])
d <- dist(as.matrix(nyc.short), method = "euclidean")
hc <- hclust(d, method="ward.D")
# draw dendogram with red borders around the X clusters
plot(hc, main = "Hierarchical Clustering Example", cex = 0.001)
rect.hclust(hc, k = 10, border="red")
#Label groups
groups <- cutree(hc, k=10) # cut tree into 5 clusters
#Set color palette
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(10))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups), pch = 15, cex = 0.2,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
recap <- sumUp(nyc311.short[,3:ncol(nyc311.short)], groups, 5)
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.3,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.2,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
#Label groups
groups <- cutree(hc, k=10) # cut tree into 5 clusters
#Set color palette
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(10))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.2,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
recap <- sumUp(nyc311.short[,3:ncol(nyc311.short)], groups, 5)
#Label groups
groups <- cutree(hc, k=10) # cut tree into 5 clusters
#Set color palette
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(10))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.3,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
recap <- sumUp(nyc311.short[,3:ncol(nyc311.short)], groups, 5)
paste(  dim(nyc311))
paste("n = ", dim(nyc311), collapse = " and k =  ")
paste("n = ", paste(dim(nyc311), collapse = " and k =  "))
colnames(nyc311)[1:10]
paste("n = ", paste(dim(nyc311), collapse = " and k =  "))
sample(colnames(nyc311), 10)
paste('"',sample(colnames(nyc311), 2), '"', collapse = " and ")
paste0('"',sample(colnames(nyc311), 2), '"', collapse = " and ")
head(nyc311)
head(nyc311$lat)
head(nyc311$lon)
nrow(nyc311)^2
nyc311.short <- nyc311[sample(1:nrow(nyc311), 20000), ]
#
nyc.short <- scale(nyc311.short[,3:ncol(nyc311.short)])
d <- dist(as.matrix(nyc.short), method = "euclidean")
hc <- hclust(d, method="ward.D")
nyc311.short <- nyc311[sample(1:nrow(nyc311), 10000), ]
scale
nyc.short2 <- scale(nyc311.short[,3:ncol(nyc311.short)])
View(nyc.short2)
View(nyc.short)
nyc311.short <- nyc311[sample(1:nrow(nyc311), 10000), ]
View(nyc311.short)
?dist
?hclust
# draw dendogram with red borders around the X clusters
plot(hc, cex = 0.001)
rect.hclust(hc, k = 10, border="red")
plot(hc, cex = 0.001, col = "grey")
rect.hclust(hc, k = 10, border="red")
plot(hc, cex = 0.001, col = "grey")
rect.hclust(hc, k = 10, border="red")
nyc311.short <- nyc311[sample(1:nrow(nyc311), 10000), ]
dis.mat <- dist(as.matrix(nyc311.short), method = "euclidean")
plot(hc, cex = 0.001, col = "grey", main = "311 clusters")
rect.hclust(hc, k = 3, border="red")
rect.hclust(hc, k = 10, border="blue")
par(mfrow = c(1,3))
# Draw dendrogram
plot(hc, cex = 0.001, col = "grey", main = "Dendrogram")
# Cut at k = 3
plot(hc, cex = 0.001, col = "grey", main = "k = 3")
rect.hclust(hc, k = 3, border="red")
# Cut at k = 10
plot(hc, cex = 0.001, col = "grey", main = "k = 10")
rect.hclust(hc, k = 10, border="red")
library(cluster)
#Set up placeholder for silhouette values
sil.out <- data.frame()
#Loop through values of k
for(k in 2:10){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
groups
length(groups)
dim(dis.mat)
nyc.short <- scale(nyc311.short[,3:ncol(nyc311.short)])
#Create dissimilarity matrix using Euclidean distances
dis.mat <- dist(as.matrix(nyc.short), method = "euclidean")
hc <- hclust(dis.mat, method = "ward.D")
library(cluster)
#Set up placeholder for silhouette values
sil.out <- data.frame()
#Loop through values of k
for(k in 2:10){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
plot(sil.out)
plot(sil.out[, c("k.level", "avg")], type = "l", col = "orange",
ylab = "Mean Silhouette", xlab = "k")
points(sil.out[, c("k.level", "avg")], pch = 19, col = "orange")
groups <- cutree(hc, k = 2)
#Set color palette
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(2))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.3,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
groups <- cutree(hc, k = 2)
#Set color palette
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(2))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.3,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
table(groups)
sumUp <- function(data, clusters, depth = 3, horizontal = FALSE){
# Summarize cluster variables by most frequent
#
# Args:
#       data: input data
#       clusters: vector of cluster labels
#       depth: top 3 most frequent variables
#       horizontal: control format of results. FALSE means one cluster per row.
#
# Returns:
#       A data frame of k-number of centroids
#
#Calculate means, rotate such that features = rows
overview <- aggregate(data, list(clusters), mean)
overview <- as.data.frame(cbind(colnames(overview)[2:ncol(overview)],
t(overview[,2:ncol(overview)])))
row.names(overview) <- 1:nrow(overview)
overview[,1] <- gsub("count.","",as.character(overview[,1]))
#Clean up values as numerics
for(i in 2:ncol(overview)){
overview[,i] <- round(as.numeric(as.character(overview[,i])),2)
}
#Get top X features
depth.temp <- data.frame()
for(i in 2:ncol(overview)){
temp <- overview[order(-overview[,i]), ]
temp <- paste("(",temp[,i], "): ", temp[,1], sep = "")
temp <- as.data.frame(matrix(temp[1:depth],
nrow = 1,
ncol = depth))
colnames(temp) <- paste0("Rank.", 1:depth)
depth.temp <- rbind(depth.temp, temp)
}
depth.temp <- cbind(data.frame(table(clusters)), depth.temp)
#Rotate?
if(horizontal == TRUE){
depth.temp <- t(depth.temp)
}
return(depth.temp)
}
sumUp(nyc.short, groups, depth = 5)
groups <- cutree(hc, k = 3)
#Set color palette
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(2))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.3,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
table(groups)
sumUp(nyc.short, groups, depth = 5)
palette(colorRampPalette(c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'))(3))
#Graph lat-lons with color coding by cluster
op <- par(mar = rep(0, 4))
plot(nyc311.short$lon, nyc311.short$lat, col = factor(groups),
pch = 15, cex = 0.3,
frame.plot=FALSE, yaxt='n', ann=FALSE, xaxt='n')
legend(x="topleft", bty = "n", legend=levels(factor(groups)),
cex = 1,  x.intersp=0, xjust=0, yjust=0, text.col=seq_along(levels(factor(groups))))
par(op)
plot(sil.out)
for(k in 2:20){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
plot(sil.out)
for(k in 2:20){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = max(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
plot(sil.out)
quantile(sil[,3])
quantile(sil[,3], 0.5)
quantile(sil[,3], 0.5)
sil.out <- data.frame()
#Loop through values of k
for(k in 2:20){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = quantile(sil[,3], 0.5))
sil.out <- rbind(sil.out, temp)
}
plot(sil.out)
dis.mat <- dist(as.matrix(nyc311.short), method = "euclidean")
hc <- hclust(dis.mat, method = "ward.D")
sil.out <- data.frame()
#Loop through values of k
for(k in 2:20){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
plot(sil.out)
for(k in seq(2, 100, 5)){
set.seed(20)
#Run k-means, save to o
groups <- cutree(hc, k = k) # cut tree into 10 clusters
#Get silhouette
sil <- silhouette(groups, dis.mat)
#Get summary values of silhouette
temp <- data.frame(k.level = k,
avg = mean(sil[,3]))
sil.out <- rbind(sil.out, temp)
}
plot(sil.out)
groups <- cutree(hc, k = 24)
sumUp(nyc.short, groups, depth = 5)
