plot(r)
auc(train$train.y, train$pred_nn)
spec <- as.formula("factor(train.y) ~ X346 + X602")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(train$train.y, train$pred)
plot(r)
auc(train$train.y, train$pred)
nn_fit <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=1)
train$pred_nn <- predict(nn_fit, type = "r")
r <- roc(train$train.y, train$pred_nn)
plot(r)
auc(train$train.y, train$pred_nn)
x = rnorm(50, 0 ,2)
y<-rep(1, length(x))
y[abs(x) < 1] = 0
plot(x,rep(0,length(x)),col=y+1)
data <- data.frame(x, y)
fit <- glm(y ~ x, data = data, family=binomial)
data$pred <- predict(fit, type = 'response')
r <- roc(data$y, data$pred)
plot(r)
auc(data$y, data$pred)
spec <- as.formula("train.y ~ X346 + X602")
fit <- glm(formula = spec, data = train, family=binomial)
spec <- as.formula("factor(train.y) ~ X346 + X602")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(train$train.y, train$pred)
plot(r)
auc(train$train.y, train$pred)
spec <- as.formula("factor(train.y) ~ X346 + X602")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(factor(train$train.y), train$pred)
plot(r)
auc(factor(train$train.y), train$pred)
nn_fit <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=1)
train$pred_nn <- predict(nn_fit, type = "r")
r <- roc(factor(train$train.y), train$pred_nn)
plot(r)
auc(factor(train$train.y), train$pred_nn)
test$pred_nn2 <- predict(nn_fit2, newdata = test, type = "r")
auc(test$test.y, test$pred_nn2)
test$pred_nn5 <- predict(nn_fit5, newdata = test, type = "r")
auc(test$test.y, test$pred_nn5)
test$pred_nn10 <- predict(nn_fit10, newdata = test, type = "r")
auc(test$test.y, test$pred_nn10)
spec <- as.formula("factor(train.y) ~ X262 + X373")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(train$train.y, train$pred)
plot(r)
auc(train$train.y, train$pred)
nn_fit <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=1)
train$pred_nn <- predict(nn_fit, type = "r")
r <- roc(train$train.y, train$pred_nn)
plot(r)
auc(train$train.y, train$pred_nn)
spec <- as.formula("factor(train.y) ~ X346 + X574")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(train$train.y, train$pred)
plot(r)
auc(train$train.y, train$pred)
nn_fit <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=1)
train$pred_nn <- predict(nn_fit, type = "r")
r <- roc(train$train.y, train$pred_nn)
plot(r)
auc(train$train.y, train$pred_nn)
data <- data.frame(x, y)
fit <- glm(y ~ x, data = data, family=binomial)
data$pred <- predict(fit, type = 'response')
r <- roc(data$y, data$pred)
plot(r)
auc(data$y, data$pred)
spec <- as.formula("factor(train.y) ~ X346 + X602")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(train$train.y, train$pred)
plot(r)
auc(train$train.y, train$pred)
nn_fit <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=1)
train$pred_nn <- predict(nn_fit, type = "r")
r <- roc(train$train.y, train$pred_nn)
plot(r)
auc(train$train.y, train$pred_nn)
nn_fit2 <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=2)
train$pred_nn2 <- predict(nn_fit2, type = "r")
auc(train$train.y, train$pred_nn2)
nn_fit5 <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=5)
train$pred_nn5 <- predict(nn_fit5, type = "r")
auc(train$train.y, train$pred_nn5)
nn_fit10 <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=10)
train$pred_nn10 <- predict(nn_fit10, type = "r")
auc(train$train.y, train$pred_nn10)
test$pred_nn2 <- predict(nn_fit2, newdata = test, type = "r")
auc(test$test.y, test$pred_nn2)
test$pred_nn5 <- predict(nn_fit5, newdata = test, type = "r")
auc(test$test.y, test$pred_nn5)
test$pred_nn10 <- predict(nn_fit10, newdata = test, type = "r")
auc(test$test.y, test$pred_nn10)
x = rnorm(50, 0 ,2)
y<-rep(1, length(x))
y[abs(x) < 1] = 0
plot(x,rep(0,length(x)),col=y+1)
data <- data.frame(x, y)
fit <- glm(y ~ x, data = data, family=binomial)
data$pred <- predict(fit, type = 'response')
r <- roc(data$y, data$pred)
plot(r)
auc(data$y, data$pred)
data$x2 <- x^2
ggplot(data, aes(x = x, y = x2, color = factor(y))) + geom_point(size = 1, alpha = 1, na.rm = TRUE)
fit <- glm(y ~ x + x2, data = data, family=binomial)
summary(fit)
#
data$pred_2 <- predict(fit, type = 'response')
#
r <- roc(data$y, data$pred_2)
plot(r)
auc(data$y, data$pred_2)
nn_fit <- nnet(y ~ x, data= data, maxit = 2000, decay = .01,  size=2)
data$pred_nn <- predict(nn_fit, type = "r")
auc(data$y, data$pred_nn)
concrete <- read_excel("Concrete_Data.xls")
colnames(concrete) <- c("cementkg", "blustfur", "flyash", "superplas", "courseagg", "fineagg", "age", "CCS")
# set the seed to make your partition reproductible
set.seed(246)
smp_size <- floor(0.80 * nrow(concrete))
train <- sample(seq_len(nrow(concrete)), size = smp_size)
concrete_train <- concrete[train,]
concrete_test <- concrete[-train,]
train_rmsr <- numeric()
for(i in 1:20) {
nn_fit <- nnet(CCS ~ ., data= concrete_train, maxit = 2000, decay = .01,  size = i)
train_rmsr[i] <- sqrt(mean((predict(nn_fit, type = "r") - concrete_train$CCS)^2))
}
train_rmsr <- data.frame(cbind(1:20, train_rmsr))
ggplot(train_rmsr, aes(x = V1, y = train_rmsr)) + geom_point(size = 1, alpha = 1, na.rm = TRUE)
test_rmsr <- numeric()
for(i in 1:20) {
nn_fit <- nnet(CCS ~ ., data= concrete_train, maxit = 2000, decay = .01,  size = i)
test_rmsr[i] <- sqrt(mean((predict(nn_fit, newdata = concrete_test, type = "r") - concrete_test$CCS)^2))
}
rmsr <- data.frame(cbind(train_rmsr, test_rmsr))
# melt the data to a long format
rmsr <- melt(data = rmsr, id.vars = "V1")
# plot
ggplot(data = rmsr, aes(x = V1, y = value, colour = variable)) + geom_point()
nn_fit <- nnet(z ~ ., data=data, maxit = 2000, decay = .01,  size=2)
set.seed(20305)
data <- data.frame(matrix(rnorm(100), nrow = 100, ncol = 11, byrow = TRUE))
colnames(data)[11] <- "z"
reg1 <- lm(z ~ ., data = data)
summary(reg1)
anova(reg1)
nn_fit <- nnet(z ~ ., data=data, maxit = 2000, decay = .01,  size=2)
nn_fit <- nnet(z ~ ., data=data, maxit = 2000, decay = .01,  size=5)
data <-load('mnist_all.RData')
train <- data.frame(train$n, train$x, train$y)
train <- train[train$train.y == 4 | train$train.y == 7,]
test <- data.frame(test$n, test$x, test$y)
test <- test[test$test.y == 4 | test$test.y == 7,]
lvlc <- sort(sapply(train , function(x) sd(x)), decreasing = TRUE)[1:20]
lvlc <- train[,names(lvlc)]
cor(lvlc)
# X346 and x602 have high variance and low correlation.
spec <- as.formula("factor(train.y) ~ X346 + X602")
fit <- glm(formula = spec, data = train, family=binomial)
train$pred <- predict(fit, type = 'response')
r <- roc(train$train.y, train$pred)
plot(r)
auc(train$train.y, train$pred)
nn_fit <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=1)
train$pred_nn <- predict(nn_fit, type = "r")
r <- roc(train$train.y, train$pred_nn)
plot(r)
auc(train$train.y, train$pred_nn)
nn_fit2 <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=2)
train$pred_nn2 <- predict(nn_fit2, type = "r")
auc(train$train.y, train$pred_nn2)
nn_fit5 <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=5)
train$pred_nn5 <- predict(nn_fit5, type = "r")
auc(train$train.y, train$pred_nn5)
nn_fit10 <- nnet(formula = spec, data=train, maxit = 2000, decay = .01,  size=10)
train$pred_nn10 <- predict(nn_fit10, type = "r")
auc(train$train.y, train$pred_nn10)
test$pred_nn2 <- predict(nn_fit2, newdata = test, type = "r")
auc(test$test.y, test$pred_nn2)
test$pred_nn5 <- predict(nn_fit5, newdata = test, type = "r")
auc(test$test.y, test$pred_nn5)
test$pred_nn10 <- predict(nn_fit10, newdata = test, type = "r")
auc(test$test.y, test$pred_nn10)
set.seed(1)
x = rnorm(50, 0 ,2)
y<-rep(1, length(x))
y[abs(x) < 1] = 0
plot(x,rep(0,length(x)),col=y+1)
data <- data.frame(x, y)
fit <- glm(y ~ x, data = data, family=binomial)
data$pred <- predict(fit, type = 'response')
r <- roc(data$y, data$pred)
plot(r)
auc(data$y, data$pred)
data$x2 <- x^2
ggplot(data, aes(x = x, y = x2, color = factor(y))) + geom_point(size = 1, alpha = 1, na.rm = TRUE)
fit <- glm(y ~ x + x2, data = data, family=binomial)
summary(fit)
#
data$pred_2 <- predict(fit, type = 'response')
#
r <- roc(data$y, data$pred_2)
plot(r)
auc(data$y, data$pred_2)
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/DataScienceIntro/lecture-03/ready")
df <- read.table("user_artists.dat", sep="\t", header = TRUE)
View(df)
ref <-  read.table("artists.dat",sep="\t", header = TRUE, quote = "", fill = TRUE)
View(ref)
ref <- ref[, 1:2]
View(ref)
View(df)
df <- merge(df, ref, by.x = "artistID", by.y = "id")
df <- df[,c(2,4)]
df$name <- as.character(df$name)
df$flag <- 1
top <- 500
count <- aggregate(df$flag, by = list(df$name), FUN=length)
count <- count[order(-count$x),]
count <- count[1:top, 1]
df <- df[df$name %in% count, ]
head(df)
#reshape
mat <- reshape(df,
idvar = "userID",
timevar = "name",
direction = "wide")
# Use this to stretch everything across the top.
# 1s are overlap between the user and the artist
#Clean up of the mat - We use \\ to indicate it's a . .
colnames(mat) <- gsub("flag\\.", "", colnames(mat))
colnames(mat) <- tolower(colnames(mat))
mat[is.na(mat)] <- 0
save(mat, file = "top.Rda")
cosSim <- function(a, b){
#
# Desc:
#   Calculates cosine similarity for two numeric vectors
#
# Args:
#   a, b = numeric vectors
#
# Returns:
#   Score between 0 and 1
z <- sum(a * b) / (sqrt(sum(a^2)) * sqrt(sum(b^2)))
return(z)
}
cosSim(items[,2], items[,5])
#Step 1: Create cosine similarity function
cosSim <- function(a, b){
#
# Desc:
#   Calculates cosine similarity for two numeric vectors
#
# Args:
#   a, b = numeric vectors
#
# Returns:
#   Score between 0 and 1
z <- sum(a * b) / (sqrt(sum(a^2)) * sqrt(sum(b^2)))
return(z)
}
# Cosine similarity is a measure of similarity between two non-zero vectors of an inner product space that measures the cosine of the angle between them
#Try out the cosine similarity - What is the relationship between duran duran and marilyn manson
cosSim(items[,2], items[,5])
cosSim(mat[,2], mat[,5])
items <- as.matrix(mat[,2:ncol(mat)])
print(grep("metallica",colnames(items)))
print(grep("red hot chili peppers",colnames(items)))
metallica <- items[, grep("metallica",colnames(items))]
peppers <- items[,grep("red hot chili peppers",colnames(items))]
cosSim(metallica, peppers)
#Set up placeholder matrix -- Note that R is faster if the matrix is preset
score  <- matrix(NA,
ncol = ncol(items),
nrow = ncol(items),
dimnames = list(colnames(items),
colnames(items)))
#Loop through each artist combination
#log the start time
a <- proc.time()[3]
#Loop through combinations
for(i in 1:ncol(items)) {
print(paste("Progress:", i))
for(j in 1:ncol(items)) {
if(is.na(score[j,i])){
score[i,j] <- cosSim(items[, i], items[, j])
score[j,i] <- score[i,j]
}
}
}
## Coding in class ahead of coding ##
earth <- "round"
if(earth == "round"){
print("The circumference is 24,901 miles!")
}
earth <- "cubed"
if(earth == "round"){
print("The Earth is a sphere!")
} else {
print("Check again, buddy.")
}
x <- 5
if(x>5){
if(x>10){
print("x > 10")
} else {
print("5 < x <= 10")
}
} else {
if(x<0) {
if(x< -10) {
print("x < 10")
} else {
print("-10 <= x < 0")
} else {
print("0 <= x <= 5")
}
}
}
## Coding in class ahead of coding ##
earth <- "round"
if(earth == "round"){
print("The circumference is 24,901 miles!")
}
earth <- "cubed"
if(earth == "round"){
print("The Earth is a sphere!")
} else {
print("Check again, buddy.")
}
# Why do I have a problem here?!?!
x <- 5
if(x>5){
if(x>10){
print("x > 10")
} else {
print("5 < x <= 10")
}
} else {
if(x<0) {
if(x< -10) {
print("x < 10")
} else {
print("-10 <= x < 0")
} else {
print("0 <= x <= 5")
}
}
}
earth <- "round"
if(earth == "round"){
print("The circumference is 24,901 miles!")
}
earth <- "cubed"
if(earth == "round"){
print("The Earth is a sphere!")
} else {
print("Check again, buddy.")
}
x <- 5
if(x>5){
if(x>10){
print("x > 10")
} else {
print("5 < x <= 10")
}
x <- 5
if(x>5){
if(x>10){
print("x > 10")
} else {
print("5 < x <= 10")
}
} else {
if(x<0) {
if(x< -10) {
print("x < 10")
} else {
print("-10 <= x < 0")
} else {
print("0 <= x <= 5")
}
}
}
# For Loops
for(i in 1:10){
print(i)
}
vec <- c("CA", "VA", "NY")
for(i in vec){
print(i)
}
for(i in 1:10){
for(j in 10:1){
print(paste(j, i))
}
}
x <- c()
for(i in 1:10){
temp <- runif(i)
x <- c(x, runif(i))
}
x
x <- matrix(NA, nrow = 100,
ncol = 100, byrow= T)
#Loop through, replacing items
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
x[i,j] <- runif(1)
print(paste(i, j))
}
}
x
length(x)
out <- lapply(1:10, function(x){
return(runif(x))
})
out
unlist(out)
n0 <- 0
n1 <- 1
f <- 0
for(i in 1:99){
f <- n0 + n1
n0 <- n1
n1 <- f
}
options(scipen=999)
f
temp <- 0
while(temp < 100){
print(paste("It's ", temp, "F, still cool"))
temp <- temp + 2
}
print("Too hot now.")
x <- 2
fibseq <- function (n0, n1, high) {
f <- 0
for( i in 1:(high - 1)) {
f <- n0 + n1
n0 <- n1
n1 <- f
}
return(f)
}
fibseq(0,1,99)
###################################################
##Lecture 3: Simplified Example of CF Item-Item  ##
###################################################
# Underlying data for class slides example of Collaborative Filtering
#Write a cosine function
cosSim <- function(a, b){
#
# Desc:
#   Calculates cosine similarity for two numeric vectors
#
# Args:
#   a, b = numeric vectors
#
# Returns:
#   Score between 0 and 1
z <- sum(a * b) / (sqrt(sum(a^2)) * sqrt(sum(b^2)))
return(z)
}
# Set up the data
health <- data.frame(syringe = c(1,1,0,0),
alc = c(0,1,1,1),
band = c(0,0,1,1),
insul = c(1,1,0,0),
neo = c(0,0,0,1))
# Create matrix
mat <- matrix(NA,
ncol = ncol(health),
nrow = ncol(health),
dimnames = list(colnames(health),colnames(health)))
#Loop through data
for(i in 1:5){
for(k in 1:5){
mat[i,k] <- cosSim(as.matrix(health[,i]),
as.matrix(health[,k]))
}
}
#Write results out
write.csv(mat, "health.csv", row.names=FALSE)
health <- data.frame(syringe = c(1,1,0,0),
alc = c(0,1,1,1),
band = c(0,0,1,1),
insul = c(1,1,0,0),
neo = c(0,0,0,1))
mat <- matrix(NA,
ncol = ncol(health),
nrow = ncol(health),
dimnames = list(colnames(health),colnames(health)))
#Loop through data
for(i in 1:5){
for(k in 1:5){
mat[i,k] <- cosSim(as.matrix(health[,i]),
as.matrix(health[,k]))
}
}
